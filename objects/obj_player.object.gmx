<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerstand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialize Variables
globalgrav = 2;
hsp = 0;
vsp = 0;
jumpspeed = 21;
movespeed = 8;
vol = 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ladders
vsp = 0;
hsp = 0;
grav = 1;
grounded = 0;
flip = 1;
djump = 0;
ladder = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_up = keyboard_check(vk_up);
key_down = keyboard_check(vk_down);
key_jump_held = keyboard_check(vk_space);

audio_sound_gain(snd_bgm_sunflowerfield,vol,0)
audio_sound_gain(snd_jump,0.5,0)

///BGM Volume Control
if (keyboard_check(ord('V')))
    {
    if(keyboard_check_pressed(vk_up) &amp;&amp; vol &lt; 1) vol += 0.1;
    if(keyboard_check_pressed(vk_down) &amp;&amp; vol &gt; 0) vol -= 0.1;
    } 

//React to Inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 20) then vsp += grav;

if (place_meeting(x,y+2,obj_wall))
{
    vsp = key_jump * -jumpspeed
    if (key_jump = 1) audio_play_sound(snd_jump,10,false)
}

if (vsp &lt; 0) &amp;&amp; (!key_jump_held) then vsp = max(vsp,-jumpspeed/4);

//Horizontal Collision
if (place_meeting (x+hsp,y-1, obj_wall))
{
    yplus = 0;
    while (place_meeting(x=hsp,y-yplus,obj_wall) &amp;&amp; yplus &lt;=abs(1*hsp)) yplus += 1;
    if place_meeting(x+hsp,y-yplus,obj_wall)
    {
        while(!place_meeting(x+sign(hsp),y-1,obj_wall))
        {
        x += sign(hsp);
        }
    hsp = 0;
    }
    else
    {
        y -= yplus;
    }
}
x += hsp;

//Vertical Collision
if (place_meeting (x,y-1+vsp,obj_wall))
{

    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
        vsp = 0;
}
y += vsp;

//ladder
if (key_up || key_down)
{
    if place_meeting(x,y,par_ladder) ladder = true;
}

if (ladder)
{
    grav = 0;
      vsp = 0;
      //hsp = 0;
    if (key_up) vsp = -5
    if (key_down) vsp = 5
    if !place_meeting(x,y,par_ladder) ladder = false
    if (key_jump) ladder = false
    if (key_jump) vsp = -jumpspeed
   
}
else grav = globalgrav

//animation and direction
if (move!=0) image_xscale = move;
if (place_meeting(x,y+5,obj_wall))
{
    if(move!=0) sprite_index = spr_playerrun; else sprite_index = spr_playerstand;
}
else
{
    if (vsp &lt; 0 &amp;&amp; place_meeting(x,y+1+vsp,obj_wall) = false) sprite_index = spr_playerjump; else sprite_index = spr_playerfall;
}

//Death
if (place_meeting(x,y,obj_death)) script_execute(scr_respawn)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
